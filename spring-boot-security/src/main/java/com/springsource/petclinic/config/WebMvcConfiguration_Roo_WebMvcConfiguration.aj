// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.petclinic.config;

import com.springsource.petclinic.config.WebMvcConfiguration;
import com.springsource.petclinic.format.OwnerFormatter;
import com.springsource.petclinic.format.PetFormatter;
import com.springsource.petclinic.format.VetFormatter;
import com.springsource.petclinic.format.VisitFormatter;
import com.springsource.petclinic.service.api.OwnerService;
import com.springsource.petclinic.service.api.PetService;
import com.springsource.petclinic.service.api.VetService;
import com.springsource.petclinic.service.api.VisitService;
import com.springsource.petclinic.web.method.support.GlobalSearchHandlerMethodArgumentResolver;
import java.lang.Override;
import java.util.List;
import java.util.Locale;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.format.FormatterRegistry;
import org.springframework.format.support.FormattingConversionService;
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.servlet.LocaleResolver;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;
import org.springframework.web.servlet.i18n.SessionLocaleResolver;

privileged aspect WebMvcConfiguration_Roo_WebMvcConfiguration {
    
    declare parents: WebMvcConfiguration extends WebMvcConfigurerAdapter;
    
    declare @type: WebMvcConfiguration: @Configuration;
    
    @Autowired
    private OwnerService WebMvcConfiguration.ownerService;
    
    @Autowired
    private PetService WebMvcConfiguration.petService;
    
    @Autowired
    private VetService WebMvcConfiguration.vetService;
    
    @Autowired
    private VisitService WebMvcConfiguration.visitService;
    
    @Primary
    @Bean
    public LocalValidatorFactoryBean WebMvcConfiguration.validator() {
        return new LocalValidatorFactoryBean();
    }
    
    @Override
    public void WebMvcConfiguration.addFormatters(FormatterRegistry registry) {
        if (!(registry instanceof FormattingConversionService)) {
            return;
        }
        FormattingConversionService conversionService = (FormattingConversionService) registry;
        
        // Entity Formatters
        conversionService.addFormatter(new OwnerFormatter(ownerService, conversionService));
        conversionService.addFormatter(new PetFormatter(petService, conversionService));
        conversionService.addFormatter(new VetFormatter(vetService, conversionService));
        conversionService.addFormatter(new VisitFormatter(visitService, conversionService));
    }
    
    @Bean
    public LocaleResolver WebMvcConfiguration.localeResolver() {
        SessionLocaleResolver localeResolver = new SessionLocaleResolver();
        localeResolver.setDefaultLocale(Locale.ENGLISH);
        return localeResolver;
    }
    
    @Bean
    public LocaleChangeInterceptor WebMvcConfiguration.localeChangeInterceptor() {
        LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor();
        localeChangeInterceptor.setParamName("lang");
        return localeChangeInterceptor;
    }
    
    @Override
    public void WebMvcConfiguration.addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(localeChangeInterceptor());
    }
    
    @Override
    public void WebMvcConfiguration.addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {
        argumentResolvers.add(globalSearchResolver());
    }
    
    public GlobalSearchHandlerMethodArgumentResolver WebMvcConfiguration.globalSearchResolver() {
        return new GlobalSearchHandlerMethodArgumentResolver();
    }
    
}
