// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.petclinic.service.impl;

import com.springsource.petclinic.domain.Owner;
import com.springsource.petclinic.domain.Pet;
import com.springsource.petclinic.reference.PetType;
import com.springsource.petclinic.repository.GlobalSearch;
import com.springsource.petclinic.repository.PetRepository;
import com.springsource.petclinic.service.api.PetService;
import com.springsource.petclinic.service.impl.PetServiceImpl;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect PetServiceImpl_Roo_Service_Impl {
    
    declare parents: PetServiceImpl implements PetService;
    
    declare @type: PetServiceImpl: @Service;
    
    declare @type: PetServiceImpl: @Transactional(readOnly = true);
    
    public PetRepository PetServiceImpl.petRepository;
    
    @Autowired
    public PetServiceImpl.new(PetRepository petRepository) {
        this.petRepository = petRepository;
    }

    @Transactional(readOnly = false)
    public Pet PetServiceImpl.save(Pet entity) {
        return petRepository.save(entity);
    }
    
    @Transactional(readOnly = false)
    public void PetServiceImpl.delete(Long id) {
         petRepository.delete(id);
    }
    
    @Transactional(readOnly = false)
    public List<Pet> PetServiceImpl.save(Iterable<Pet> entities) {
        return petRepository.save(entities);
    }
    
    @Transactional(readOnly = false)
    public void PetServiceImpl.delete(Iterable<Long> ids) {
        List<Pet> toDelete = petRepository.findAll(ids);
        petRepository.deleteInBatch(toDelete);
    }
    
    public List<Pet> PetServiceImpl.findAll() {
        return petRepository.findAll();
    }
    
    public List<Pet> PetServiceImpl.findAll(Iterable<Long> ids) {
        return petRepository.findAll(ids);
    }
    
    public Pet PetServiceImpl.findOne(Long id) {
        return petRepository.findOne(id);
    }
    
    public long PetServiceImpl.count() {
        return petRepository.count();
    }
    
    public List<Pet> PetServiceImpl.findByNameAndWeight(String name, Float weight) {
        return petRepository.findByNameAndWeight(name, weight);
    }
    
    public List<Pet> PetServiceImpl.findByOwner(Owner owner) {
        return petRepository.findByOwner(owner);
    }
    
    public List<Pet> PetServiceImpl.findBySendRemindersAndWeightLessThan(boolean sendReminders, Float weight) {
        return petRepository.findBySendRemindersAndWeightLessThan(sendReminders, weight);
    }
    
    public List<Pet> PetServiceImpl.findByTypeAndNameLike(PetType type, String name) {
        return petRepository.findByTypeAndNameLike(type, name);
    }
    
    public Page<Pet> PetServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return petRepository.findAll(globalSearch, pageable);
    }
    
    public Long PetServiceImpl.countByOwnerId(Long id) {
        return petRepository.countByOwnerId(id);
    }
    
    public Page<Pet> PetServiceImpl.findAllByOwner(Owner ownerField, GlobalSearch globalSearch, Pageable pageable) {
        return petRepository.findAllByOwner(ownerField, globalSearch, pageable);
    }
    
}
