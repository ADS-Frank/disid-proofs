// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.petclinic.web;

import com.springsource.petclinic.datatables.DatatablesData;
import com.springsource.petclinic.datatables.DatatablesPageable;
import com.springsource.petclinic.domain.Owner;
import com.springsource.petclinic.domain.Pet;
import com.springsource.petclinic.repository.GlobalSearch;
import com.springsource.petclinic.web.OwnerController;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

privileged aspect OwnerController_Roo_Thymeleaf {
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String OwnerController.list(Model model) {
        return "owners/list";
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Page<Owner> OwnerController.list(GlobalSearch search, Pageable pageable) {
        Page<Owner> owner = ownerService.findAll(search, pageable);
        return owner;
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = "application/vnd.datatables+json")
    @ResponseBody
    public DatatablesData<Owner> OwnerController.list(GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        Page<Owner> owner = list(search, pageable);
        long allAvailableOwner = ownerService.count();
        return new DatatablesData<Owner>(owner, allAvailableOwner, draw);
    }
    
    @RequestMapping(value = "/create-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String OwnerController.createForm(Model model) {
        model.addAttribute(new Owner());
        populateForm(model);
        return "owners/create";
    }
    
    @RequestMapping(method = RequestMethod.POST, produces = MediaType.TEXT_HTML_VALUE)
    public String OwnerController.create(@Valid @ModelAttribute Owner owner, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "owners/create";
        }
        Owner newOwner = ownerService.save(owner);
        redirectAttrs.addAttribute("id", newOwner.getId());
        return "redirect:/owners/{id}";
    }
    
    @RequestMapping(value = "/{owner}/edit-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String OwnerController.editForm(@PathVariable("owner") Owner owner, Model model) {
        populateForm(model);
        return "owners/edit";
    }
    
    @RequestMapping(value = "/{owner}", method = RequestMethod.PUT, produces = MediaType.TEXT_HTML_VALUE)
    public String OwnerController.update(@Valid @ModelAttribute Owner owner, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "owners/edit";
        }
        Owner savedOwner = ownerService.save(owner);
        redirectAttrs.addAttribute("id", savedOwner.getId());
        return "redirect:/owners/{id}";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.TEXT_HTML_VALUE)
    public String OwnerController.delete(@PathVariable("id") Long id, Model model) {
        ownerService.delete(id);
        return "redirect:/owners";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity OwnerController.delete(@PathVariable("id") Long id) {
        ownerService.delete(id);
        return new ResponseEntity(HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{owner}", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String OwnerController.show(@PathVariable("owner") Owner owner, Model model) {
        return "owners/show";
    }
    
    @RequestMapping(value = "/{id}/pets/", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Page<Pet> OwnerController.listPet(@PathVariable("id") Owner id, GlobalSearch search, Pageable pageable) {
        Page<Pet> pet = petService.findAllByOwner(id, search, pageable);
        return pet;
    }
    
    @RequestMapping(method = RequestMethod.GET, value = "/{id}/pets/", produces = "application/vnd.datatables+json")
    @ResponseBody
    public DatatablesData<Pet> OwnerController.listPet(@PathVariable("id") Owner id, GlobalSearch search, Pageable pageable, @RequestParam("draw") Integer draw) {
        Page<Pet> pet = listPet(id, search, pageable);
        long allAvailablePetDetails = petService.countByOwnerId(id.getId());
        return new DatatablesData<Pet>(pet, allAvailablePetDetails, draw);
    }
    
    public void OwnerController.populateForm(Model model) {
        populateFomats(model);
    }
    
    public void OwnerController.populateFomats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
        model.addAttribute("birthDay_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
}
