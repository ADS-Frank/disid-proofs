// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.disid.restful.web;

import com.disid.restful.model.CustomerOrder;
import com.disid.restful.model.OrderDetail;
import com.disid.restful.model.Product;
import com.disid.restful.web.ProductController;
import java.lang.SuppressWarnings;
import java.net.URI;
import java.util.Collection;
import java.util.List;
import javax.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect ProductController_Roo_JSON {
    
    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResponseEntity ProductController.create(@Valid @RequestBody Product product, BindingResult result) {
        
        if (product.getId() != null) {
            return new ResponseEntity(HttpStatus.CONFLICT);
        }
        
        if (result.hasErrors()) {
            return new ResponseEntity(result, HttpStatus.CONFLICT);
        }
        
        Product newProduct = productService.save(product);
        HttpHeaders responseHeaders = populateHeaders(newProduct.getId());
        
        return new ResponseEntity(newProduct, responseHeaders, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{product}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResponseEntity ProductController.update(@Valid @RequestBody Product product, BindingResult result) {
        
        if (result.hasErrors()) {
            return new ResponseEntity(result, HttpStatus.CONFLICT);
        }
        
        Product savedProduct = productService.save(product);
        
        return new ResponseEntity(savedProduct, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/batch", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResponseEntity ProductController.createBatch(@Valid @RequestBody Collection<Product> products, BindingResult result) {
        
        if (result.hasErrors()) {
            return new ResponseEntity(result, HttpStatus.CONFLICT);
        }
        
        List<Product> newProducts = productService.save(products);
        
        return new ResponseEntity(newProducts, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/batch", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResponseEntity ProductController.updateBatch(@Valid @RequestBody Collection<Product> products, BindingResult result) {
        
        if (result.hasErrors()) {
            return new ResponseEntity(result, HttpStatus.CONFLICT);
        }
        
        List<Product> savedProducts = productService.save(products);
        
        return new ResponseEntity(savedProducts, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/batch/{ids}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes" })
    public ResponseEntity ProductController.deleteBatch(@PathVariable("ids") Collection<Long> ids) {
        
        productService.delete(ids);
        
        return new ResponseEntity(HttpStatus.OK);
    }
    
    public HttpHeaders ProductController.populateHeaders(Long id) {
        UriComponents uriComponents = UriComponentsBuilder.fromUriString("/products/{id}").build();
        URI uri = uriComponents.expand(id).encode().toUri();
        
        HttpHeaders responseHeaders = new HttpHeaders();
        responseHeaders.setLocation(uri);
        return responseHeaders;
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResponseEntity ProductController.show(@PathVariable("id") Long id) {
        
        Product product = productService.findOne(id);
        
        if (product == null) {
            return new ResponseEntity(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity(product, HttpStatus.FOUND);
    }
    
}
