// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.disid.restful.web;

import com.disid.restful.datatables.DatatablesData;
import com.disid.restful.datatables.DatatablesPageable;
import com.disid.restful.model.CustomerOrder;
import com.disid.restful.model.OrderDetail;
import com.disid.restful.repository.GlobalSearch;
import com.disid.restful.web.CustomerOrderController;
import javax.validation.Valid;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

privileged aspect CustomerOrderController_Roo_Thymeleaf {
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String CustomerOrderController.list(Model model) {
        return "customerorders/list";
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Page<CustomerOrder> CustomerOrderController.list(GlobalSearch search, Pageable pageable) {
        Page<CustomerOrder> customerOrder = customerOrderService.findAll(search, pageable);
        return customerOrder;
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = "application/vnd.datatables+json")
    @ResponseBody
    public DatatablesData<CustomerOrder> CustomerOrderController.list(GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        Page<CustomerOrder> customerOrder = list(search, pageable);
        long allAvailableCustomerOrder = customerOrderService.count();
        return new DatatablesData<CustomerOrder>(customerOrder, allAvailableCustomerOrder, draw);
    }
    
    @RequestMapping(value = "/create-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String CustomerOrderController.createForm(Model model) {
        model.addAttribute(new CustomerOrder());
        populateForm(model);
        return "customerorders/create";
    }
    
    @RequestMapping(method = RequestMethod.POST, produces = MediaType.TEXT_HTML_VALUE)
    public String CustomerOrderController.create(@Valid @ModelAttribute CustomerOrder customerOrder, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "customerorders/create";
        }
        CustomerOrder newCustomerOrder = customerOrderService.save(customerOrder);
        redirectAttrs.addAttribute("id", newCustomerOrder.getId());
        return "redirect:/customerorders/{id}";
    }
    
    @RequestMapping(value = "/{customerOrder}/edit-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String CustomerOrderController.editForm(@PathVariable("customerOrder") CustomerOrder customerOrder, Model model) {
        populateForm(model);
        return "customerorders/edit";
    }
    
    @RequestMapping(value = "/{customerOrder}", method = RequestMethod.PUT, produces = MediaType.TEXT_HTML_VALUE)
    public String CustomerOrderController.update(@Valid @ModelAttribute CustomerOrder customerOrder, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "customerorders/edit";
        }
        CustomerOrder savedCustomerOrder = customerOrderService.save(customerOrder);
        redirectAttrs.addAttribute("id", savedCustomerOrder.getId());
        return "redirect:/customerorders/{id}";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.TEXT_HTML_VALUE)
    public String CustomerOrderController.delete(@PathVariable("id") Long id, Model model) {
        customerOrderService.delete(id);
        return "redirect:/customerorders";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity CustomerOrderController.delete(@PathVariable("id") Long id) {
        customerOrderService.delete(id);
        return new ResponseEntity(HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{customerOrder}", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String CustomerOrderController.show(@PathVariable("customerOrder") CustomerOrder customerOrder, Model model) {
        return "customerorders/show";
    }
    
    @RequestMapping(value = "/{id_}/orderdetails/", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Page<OrderDetail> CustomerOrderController.listOrderDetail(@PathVariable("id") CustomerOrder id, GlobalSearch search, Pageable pageable) {
        Page<OrderDetail> orderDetail = orderDetailService.findAllByCustomerOrder(id, search, pageable);
        return orderDetail;
    }
    
    @RequestMapping(method = RequestMethod.GET, value = "/{id}/orderdetails/", produces = "application/vnd.datatables+json")
    @ResponseBody
    public DatatablesData<OrderDetail> CustomerOrderController.listOrderDetail(@PathVariable("id") CustomerOrder id, GlobalSearch search, Pageable pageable, @RequestParam("draw") Integer draw) {
        Page<OrderDetail> orderDetail = listOrderDetail(id, search, pageable);
        long allAvailableOrderDetailDetails = orderDetailService.countByCustomerOrderId(id.getId());
        return new DatatablesData<OrderDetail>(orderDetail, allAvailableOrderDetailDetails, draw);
    }
    
    public void CustomerOrderController.populateForm(Model model) {
        populateFomats(model);
    }
    
    public void CustomerOrderController.populateFomats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
        model.addAttribute("orderDate_date_format", "dd/MM/yyyy");
        model.addAttribute("shippedDate_date_format", "dd/MM/yyyy");
    }
    
}
