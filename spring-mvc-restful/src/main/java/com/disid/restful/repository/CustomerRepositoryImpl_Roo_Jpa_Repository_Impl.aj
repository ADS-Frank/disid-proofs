// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.disid.restful.repository;

import com.disid.restful.model.Address;
import com.disid.restful.model.Customer;
import com.disid.restful.model.QCustomer;
import com.disid.restful.repository.CustomerRepositoryCustom;
import com.disid.restful.repository.CustomerRepositoryImpl;
import com.disid.restful.repository.GlobalSearch;
import com.mysema.query.BooleanBuilder;
import com.mysema.query.jpa.JPQLQuery;
import com.mysema.query.types.Order;
import com.mysema.query.types.OrderSpecifier;
import com.mysema.query.types.path.NumberPath;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CustomerRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: CustomerRepositoryImpl implements CustomerRepositoryCustom;
    
    declare @type: CustomerRepositoryImpl: @Transactional(readOnly = true);
    
    public Page<Customer> CustomerRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        NumberPath<Long> idCustomer = new NumberPath<Long>(Long.class, "id");
        QCustomer customer = QCustomer.customer;
        JPQLQuery query = getQueryFrom(customer);
        BooleanBuilder where = new BooleanBuilder();

        if (globalSearch != null) {
            String txt = globalSearch.getText();
            where.and(
                customer.firstName.containsIgnoreCase(txt)
                .or(customer.lastName.containsIgnoreCase(txt))
            );

        }
        query.where(where);

        long totalFound = query.count();
        if (pageable != null) {
            if (pageable.getSort() != null) {
                for (Sort.Order order : pageable.getSort()) {
                    Order direction = order.isAscending() ? Order.ASC : Order.DESC;

                    switch(order.getProperty()){
                        case "firstName":
                           query.orderBy(new OrderSpecifier<String>(direction, customer.firstName));
                           break;
                        case "lastName":
                           query.orderBy(new OrderSpecifier<String>(direction, customer.lastName));
                           break;
                    }
                }
            }
            query.offset(pageable.getOffset()).limit(pageable.getPageSize());
        }
        query.orderBy(idCustomer.asc());
        
        List<Customer> results = query.list(customer);
        return new PageImpl<Customer>(results, pageable, totalFound);
    }
    
    public Page<Customer> CustomerRepositoryImpl.findAllByAddress(Address addressField, GlobalSearch globalSearch, Pageable pageable) {
        NumberPath<Long> idCustomer = new NumberPath<Long>(Long.class, "id");
        QCustomer customer = QCustomer.customer;
        JPQLQuery query = getQueryFrom(customer);
        BooleanBuilder where = new BooleanBuilder(customer.address.eq(addressField));

        if (globalSearch != null) {
            String txt = globalSearch.getText();
            where.and(
                customer.firstName.containsIgnoreCase(txt)
                .or(customer.lastName.containsIgnoreCase(txt))
            );

        }
        query.where(where);

        long totalFound = query.count();
        if (pageable != null) {
            if (pageable.getSort() != null) {
                for (Sort.Order order : pageable.getSort()) {
                    Order direction = order.isAscending() ? Order.ASC : Order.DESC;

                    switch(order.getProperty()){
                        case "firstName":
                           query.orderBy(new OrderSpecifier<String>(direction, customer.firstName));
                           break;
                        case "lastName":
                           query.orderBy(new OrderSpecifier<String>(direction, customer.lastName));
                           break;
                    }
                }
            }
            query.offset(pageable.getOffset()).limit(pageable.getPageSize());
        }
        query.orderBy(idCustomer.asc());
        
        List<Customer> results = query.list(customer);
        return new PageImpl<Customer>(results, pageable, totalFound);
    }
    
}
